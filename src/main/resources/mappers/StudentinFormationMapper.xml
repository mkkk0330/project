<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxxx.crm.dao.StudentinFormationMapper">
  <resultMap id="BaseResultMap" type="com.xxxx.crm.vo.Student">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="dormitory_id" jdbcType="INTEGER" property="dormitoryId" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="create_date" jdbcType="VARCHAR" property="createDate" />
  </resultMap>
  <sql id="Base_Column_List">
    id, number, name, gender, dormitory_id, state, create_date
  </sql>

  <select id="selectByPrimaryKey2" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where name = #{name,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xxxx.crm.vo.Student">
    insert into student (id, number, name, 
      gender, dormitory_id, state, 
      create_date)
    values (#{id,jdbcType=INTEGER}, #{number,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{gender,jdbcType=VARCHAR}, #{dormitoryId,jdbcType=INTEGER}, #{state,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xxxx.crm.vo.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="dormitoryId != null">
        dormitory_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="dormitoryId != null">
        #{dormitoryId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xxxx.crm.vo.Student">
    update student
    <set>
      <if test="number != null">
        number = #{number,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="dormitoryId != null">
        dormitory_id = #{dormitoryId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xxxx.crm.vo.Student">
    update student
    set number = #{number,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      dormitory_id = #{dormitoryId,jdbcType=INTEGER},
      state = #{state,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--多条件查询-->
  <select id="selectByParams" resultType="com.xxxx.crm.vo.Student" parameterType="com.xxxx.crm.query.StudentinFormationQuery">
    select
    student.id id,dormitory.name dormitoryId,student.name name,number,gender,state,create_date,
    building.name building
    from
    student
    left join dormitory on student.dormitory_id = dormitory.id
    left join building on dormitory.building_id=building.id
    <where>
    <if test="name != null and name !=''">
      and student.name like concat('%',#{name},'%')
    </if>
    <if test="state != null and state !=''">
      and state like concat('%',#{state},'%')
    </if>
    <if test="number != null and number !=''">
      and number like concat('%',#{number},'%')
    </if>
    </where>
  </select>


  <delete id="deleteBatch">
    DELETE from
    student
    where
    id in
    <foreach collection="array" item="id" open="(" close=")" separator=",">
     #{id}
     </foreach>
    </delete>

  <select id="queryAll" resultType="map">
    select name,id from building
  </select>
</mapper>